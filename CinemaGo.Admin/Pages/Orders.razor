@page "/orders"

@using CinemaGo.DataModels.CustomModels;
@using CinemaGo.Admin.Services;
@inject IAdminPanelService adminPanelService;

<style>
    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>


<h3>Orders</h3>

@if (orderdetailModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-body bg-dark">
        @if (orderdetailList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-striped table-bordered bg-light">
                <thead>
                    <tr>
                        <th style="width:15px;">Sr.No</th>
                        <th>OrderId</th>
                        <th>ProductId</th>
                        <th>SeatQuantity</th>
                        <th>Total</th>
                        <th style="width:80px;">Delete?</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (index, msg) in orderdetailList.Select((msg, i) => (i + 1, msg)))
                    {
                        <tr>
                            <td>@index</td>
                            <td>@msg.OrderId</td>
                            <td>@msg.ProductId</td>
                            <td>@msg.Quantity</td>
                            <td>@msg.SubTotal</td>
                            <td><input type="button" class="btn btn-primary" value="Delete" @onclick="(() => DeleteButtonClick(msg))" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
}

@if (showDeletePopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Delete Contact</h5>
                <span class="close" @onclick="ToggleEditPopup">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to Delete<span style="background-color:yellow;">@orderdetailToDelete.OrderId ?</span> Orders

            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteOrderDetail" />
            </div>

        </div>

    </div>
}
@if (successPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @text
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}

@code {

    [CascadingParameter]
    public EventCallback notify { get; set; }
    public OrderDetailModel orderdetailModel { get; set; }
    public List<OrderDetailModel> orderdetailList { get; set; }
    public bool showDeletePopup = false;
    public OrderDetailModel orderdetailToDelete { get; set; }
    public string text = string.Empty;
    public bool successPopup = false;
    public bool showEditPopup = false;

    protected override async Task OnInitializedAsync()
    {
        orderdetailModel = new OrderDetailModel();
        await GetOrderDetails();

    }

    private async Task GetOrderDetails()
    {
        orderdetailList = await adminPanelService.GetOrderDetails();

    }
    private async Task DeleteOrderDetail()
    {
        bool flag = await adminPanelService.DeleteOrderDetail(orderdetailToDelete);
        ToggleDeletePopup();
        if (flag)
        {
            text = "Messages Deleted Successfully !";
        }
        else
        {
            text = "Messages Not Deleted Try Again!";
        }

        ToggleSuccessPopup();
        orderdetailModel = new OrderDetailModel();
        await GetOrderDetails();
    }

    private void DeleteButtonClick(OrderDetailModel _orderdetailToDelete)
    {
        orderdetailToDelete = _orderdetailToDelete;
        ToggleDeletePopup();
    }
    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }

    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        successPopup = successPopup == true ? false : true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }

    }
}
